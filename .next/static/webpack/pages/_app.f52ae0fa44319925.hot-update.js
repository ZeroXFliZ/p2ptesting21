"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./utils/blockchain.js":
/*!*****************************!*\
  !*** ./utils/blockchain.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   claimPayment: function() { return /* binding */ claimPayment; },\n/* harmony export */   confirmDelivery: function() { return /* binding */ confirmDelivery; },\n/* harmony export */   connectWallet: function() { return /* binding */ connectWallet; },\n/* harmony export */   editItemPrice: function() { return /* binding */ editItemPrice; },\n/* harmony export */   getContract: function() { return /* binding */ getContract; },\n/* harmony export */   getCurrentAccount: function() { return /* binding */ getCurrentAccount; },\n/* harmony export */   getProvider: function() { return /* binding */ getProvider; },\n/* harmony export */   getSigner: function() { return /* binding */ getSigner; },\n/* harmony export */   getTradeDetails: function() { return /* binding */ getTradeDetails; },\n/* harmony export */   isWalletConnected: function() { return /* binding */ isWalletConnected; },\n/* harmony export */   listItem: function() { return /* binding */ listItem; },\n/* harmony export */   purchaseItem: function() { return /* binding */ purchaseItem; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _contracts_P2PMarketplaceABI_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contracts/P2PMarketplaceABI.json */ \"./contracts/P2PMarketplaceABI.json\");\n\n\nconst contractAddress = \"0x101D26C5CFBcC31c6eA30b074045E4d2624649e9\";\nconst baseNetworkUrl = \"https://base.gateway.tenderly.co\";\n// Get provider based on environment\nconst getProvider = ()=>{\n    // For client-side\n    if ( true && window.ethereum) {\n        return new ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.providers.Web3Provider(window.ethereum);\n    }\n    // For server-side or fallback\n    return new ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.providers.JsonRpcProvider(baseNetworkUrl);\n};\n// Get signer for transactions\nconst getSigner = async ()=>{\n    // Check if we're on the server side\n    if (false) {}\n    // Check if wallet is available\n    if (!window.ethereum) {\n        throw new Error(\"No wallet detected. Please install a Web3 wallet like MetaMask.\");\n    }\n    const provider = getProvider();\n    // Request account access if needed\n    if (provider && provider.provider && provider.provider.request) {\n        try {\n            await provider.provider.request({\n                method: \"eth_requestAccounts\"\n            });\n        } catch (error) {\n            console.error(\"Error requesting accounts:\", error);\n            throw new Error(\"Failed to connect to wallet: \" + error.message);\n        }\n    } else if (window.ethereum) {\n        // Fallback for some wallet providers\n        try {\n            await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n        } catch (error) {\n            console.error(\"Error requesting accounts via window.ethereum:\", error);\n            throw new Error(\"Failed to connect to wallet: \" + error.message);\n        }\n    } else {\n        throw new Error(\"No wallet connection method available. Please make sure your wallet is unlocked.\");\n    }\n    // Verify we have accounts before returning signer\n    const accounts = await provider.listAccounts();\n    if (!accounts || accounts.length === 0) {\n        throw new Error(\"No accounts found. Please make sure your wallet is connected and unlocked.\");\n    }\n    return provider.getSigner();\n};\n// Get contract instance\nconst getContract = async function() {\n    let withSigner = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n    if (!contractAddress) {\n        throw new Error(\"Contract address not configured\");\n    }\n    if (withSigner) {\n        const signer = await getSigner();\n        return new ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.Contract(contractAddress, _contracts_P2PMarketplaceABI_json__WEBPACK_IMPORTED_MODULE_0__, signer);\n    }\n    const provider = getProvider();\n    return new ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.Contract(contractAddress, _contracts_P2PMarketplaceABI_json__WEBPACK_IMPORTED_MODULE_0__, provider);\n};\n// Connect wallet and return address\nconst connectWallet = async ()=>{\n    try {\n        const signer = await getSigner();\n        const address = await signer.getAddress();\n        return {\n            success: true,\n            address\n        };\n    } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// List an item on the marketplace\nconst listItem = async (price, name, description)=>{\n    try {\n        const contract = await getContract(true);\n        const priceInWei = ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.utils.parseEther(price.toString());\n        const listingFee = ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.utils.parseEther(\"0.0000004\");\n        // Call the contract function\n        const tx = await contract.listItem(priceInWei, {\n            value: listingFee\n        });\n        // Wait for transaction to be mined\n        const receipt = await tx.wait();\n        // Get the itemId from the event\n        const event = receipt.events.find((event)=>event.event === \"ItemListed\");\n        // Check if the event exists before accessing its properties\n        if (!event || !event.args) {\n            // If event is not found, try to get the itemId from logs\n            console.log(\"ItemListed event not found in transaction receipt, trying alternative methods\");\n            // Since we can't directly access nextItemId (it's private in the contract),\n            // we'll need to estimate it based on transaction data or use another approach\n            // Let's try to query the transaction receipt for more information\n            const logs = receipt.logs;\n            let itemId;\n            // Try to extract itemId from logs\n            if (logs && logs.length > 0) {\n                // Look for the last log which might contain our event data\n                const lastLog = logs[logs.length - 1];\n                // Try to decode the log data to find the itemId\n                try {\n                    // The itemId is likely in the data or topics of the log\n                    // This is a simplified approach - might need adjustment based on actual log structure\n                    const topicData = lastLog.topics[1]; // Second topic often contains indexed parameters\n                    if (topicData) {\n                        itemId = parseInt(topicData, 16);\n                    }\n                } catch (err) {\n                    console.error(\"Error extracting itemId from logs:\", err);\n                }\n            }\n            // If we couldn't extract from logs, make a best guess\n            if (!itemId) {\n                // As a fallback, we'll query a recent item to estimate the ID\n                // This is not ideal but better than failing completely\n                itemId = Date.now(); // Use timestamp as a last resort placeholder\n                console.warn(\"Could not determine exact itemId, using fallback method\");\n            }\n            return {\n                success: true,\n                itemId\n            };\n        }\n        const itemId = event.args.itemId.toNumber();\n        return {\n            success: true,\n            itemId\n        };\n    } catch (error) {\n        console.error(\"Error listing item:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Purchase an item\nconst purchaseItem = async (itemId, price)=>{\n    try {\n        const contract = await getContract(true);\n        const priceInWei = ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.utils.parseEther(price.toString());\n        // Call the contract function\n        const tx = await contract.purchaseItem(itemId, {\n            value: priceInWei\n        });\n        // Wait for transaction to be mined\n        await tx.wait();\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error purchasing item:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Confirm delivery of an item\nconst confirmDelivery = async (itemId)=>{\n    try {\n        const contract = await getContract(true);\n        // Call the contract function\n        const tx = await contract.confirmDelivery(itemId);\n        // Wait for transaction to be mined\n        await tx.wait();\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error confirming delivery:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Claim payment for a sold item\nconst claimPayment = async (itemId)=>{\n    try {\n        const contract = await getContract(true);\n        // Call the contract function\n        const tx = await contract.claimPayment(itemId);\n        // Wait for transaction to be mined\n        await tx.wait();\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error claiming payment:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Edit item price\nconst editItemPrice = async (itemId, newPrice)=>{\n    try {\n        const contract = await getContract(true);\n        const priceInWei = ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.utils.parseEther(newPrice.toString());\n        // Call the contract function\n        const tx = await contract.editItemPrice(itemId, priceInWei);\n        // Wait for transaction to be mined\n        await tx.wait();\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error editing item price:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Get trade details\nconst getTradeDetails = async (itemId)=>{\n    try {\n        const contract = await getContract();\n        // Call the contract function\n        const details = await contract.getTradeDetails(itemId);\n        return {\n            success: true,\n            details: {\n                seller: details[0],\n                buyer: details[1],\n                price: ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.utils.formatEther(details[2]),\n                isDelivered: details[3],\n                isCompleted: details[4]\n            }\n        };\n    } catch (error) {\n        console.error(\"Error getting trade details:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Check if wallet is connected\nconst isWalletConnected = async ()=>{\n    try {\n        if ( false || !window.ethereum) {\n            return false;\n        }\n        const provider = getProvider();\n        const accounts = await provider.listAccounts();\n        return accounts && accounts.length > 0;\n    } catch (error) {\n        console.error(\"Error checking wallet connection:\", error);\n        return false;\n    }\n};\n// Get current account\nconst getCurrentAccount = async ()=>{\n    try {\n        if (!await isWalletConnected()) {\n            return null;\n        }\n        const provider = getProvider();\n        const accounts = await provider.listAccounts();\n        return accounts[0] || null;\n    } catch (error) {\n        console.error(\"Error getting current account:\", error);\n        return null;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/blockchain.js\n"));

/***/ })

});